---
alwaysApply: true
description: IntoTheHeaven Frontend Development Conventions and Architecture
---

# **üôè IntoTheHeaven Frontend - Development Conventions**

> _"A record of community's walk with God."_ - A platform for managing prayer topics and life sharing in church small groups.

## **üéØ Project Philosophy**

This is not just a utility ‚Äî it's a **spiritual reflection tool** for church communities.

- What have we prayed for as a group?
- How has God answered over time?

**Target Users:**

- **üü¶ Group Leaders**: Organize meetings, record sharing/prayer topics, track spiritual growth
- **üü® Regular Members**: Participate in meetings, reflect on past prayers, minimal interaction

## **üß± Tech Stack & Architecture**

| Layer    | Technology                       |
| -------- | -------------------------------- |
| Frontend | React WebApp (TypeScript + Vite) |
| Backend  | Spring Boot (Java 17+)           |
| Database | MySQL                            |
| Auth     | JWT (no refresh token)           |
| Styling  | Tailwind CSS                     |
| Infra    | Vercel (FE), HomeServer/AWS (BE) |

**Architecture Principles:**

- Mobile-first responsive design

## **üèóÔ∏è Project Structure**

```
src/
‚îú‚îÄ‚îÄ features/           ‚Üí Domain-driven feature folders
‚îÇ   ‚îú‚îÄ‚îÄ auth/          ‚Üí Authentication (login/logout)
‚îÇ   ‚îú‚îÄ‚îÄ meetings/      ‚Üí Meeting management & history
‚îÇ   ‚îú‚îÄ‚îÄ prayers/       ‚Üí Prayer topic tracking
‚îÇ   ‚îú‚îÄ‚îÄ members/       ‚Üí Group member management
‚îÇ   ‚îî‚îÄ‚îÄ sharing/       ‚Üí Life sharing topics
‚îú‚îÄ‚îÄ components/        ‚Üí Reusable UI components
‚îú‚îÄ‚îÄ pages/             ‚Üí Route entry points
‚îú‚îÄ‚îÄ routes/            ‚Üí Navigation configuration
‚îú‚îÄ‚îÄ lib/               ‚Üí Core utilities
‚îÇ   ‚îú‚îÄ‚îÄ api.ts        ‚Üí [api.ts](mdc:src/lib/api.ts) - API client
‚îÇ   ‚îî‚îÄ‚îÄ utils.ts      ‚Üí [utils.ts](mdc:src/lib/utils.ts) - General utilities
‚îú‚îÄ‚îÄ hooks/             ‚Üí Custom React hooks
‚îÇ   ‚îú‚îÄ‚îÄ useLocalStorage.ts ‚Üí [useLocalStorage.ts](mdc:src/hooks/useLocalStorage.ts)
‚îÇ   ‚îî‚îÄ‚îÄ useDebounce.ts     ‚Üí [useDebounce.ts](mdc:src/hooks/useDebounce.ts)
‚îú‚îÄ‚îÄ types/             ‚Üí [types/index.ts](mdc:src/types/index.ts) - TypeScript interfaces
‚îî‚îÄ‚îÄ styles/            ‚Üí Global styles & Tailwind config
```

## **üîß Coding Conventions**

### Naming Conventions

- **Components**: PascalCase (`PrayerCard.tsx`, `MeetingHistory.tsx`)
- **Hooks**: camelCase with `use` prefix (`usePrayerTopics.ts`)
- **API functions**: camelCase (`fetchMeetings`, `createPrayerTopic`)
- **Types/Interfaces**: PascalCase (`PrayerTopic`, `Meeting`)
- **Folders**: kebab-case (`prayer-topics/`, `meeting-history/`)

### Component Structure

```tsx
// Component: PrayerTopicCard
import React from 'react'

interface PrayerTopicCardProps {
  prayer: PrayerTopic
  onUpdate?: (prayer: PrayerTopic) => void
}

function PrayerTopicCard({ prayer, onUpdate }: PrayerTopicCardProps) {
  const handleUpdate = (updatedPrayer: PrayerTopic) => {
    onUpdate?.(updatedPrayer)
  }

  return (
    <div className="card">
      <div className="card-header">
        <span className={`badge ${prayer.category}`}>{prayer.category}</span>
      </div>
      <div className="card-content">
        <p>{prayer.content}</p>
        {prayer.isAnswered && (
          <div className="answered-indicator">‚úì Answered</div>
        )}
        <button onClick={e => handleUpdate(prayer)}>Update</button>
      </div>
    </div>
  )
}

export default PrayerTopicCard
```

## **‚ö° Development Guidelines**

### API Integration

- JWT authentication with re-login on expiry
- RESTful endpoints matching Spring Boot backend
- Proper error handling for spiritual content
- Offline capability for meeting records

### Mobile-First Design

- Church members primarily use phones
- Simple, large touch targets
- Readable fonts for all ages
- Accessible to elderly users

### State Management

- Use React built-in hooks primarily
- [useLocalStorage.ts](mdc:src/hooks/useLocalStorage.ts) for user preferences
- [useDebounce.ts](mdc:src/hooks/useDebounce.ts) for search functionality
- Context for global prayer/meeting state

### Performance

- Lazy load meeting history
- Debounce search inputs
- Optimize for slower mobile connections
- Cache recent meetings offline

## **‚úÖ Best Practices**

- ‚úÖ Always provide privacy controls
- ‚úÖ Use reverent, respectful language
- ‚úÖ Design for accessibility (all ages)
- ‚úÖ Enable historical spiritual reflection
- ‚úÖ Support offline meeting recording
- ‚úÖ Keep UI simple and focused

## **üåê Deployment Requirements**

- HTTPS mandatory (PWA requirement)
- Environment variables for API endpoints
- Privacy policy for spiritual content
- Mobile browser testing (iOS/Android)

---
